name: CI/CD Pipeline

on:
  push:
    branches: [main]
  # pull_request:
  #   branches:[ main ]

jobs:
  continuous-integration:
    runs-on: ubuntu-latest
    env:
      ACTIONS_STEP_DEBUG: true
      ACTIONS_RUNNER_DEBUG: true
    outputs:
      tag: ${{steps.tag.outputs.tag}}

    steps:
      - name: Clone repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get Tags
        id: tag
        run: |
          tag=$(bash getTags.sh)
          echo "tag $tag"
          echo tag=$tag >> $GITHUB_OUTPUT

      - name: Set up Python all python version
        uses: actions/setup-python@v2
        with:
          python-version: 3.7
          architecture: x64

      - name: Install Python Virtual ENV
        run: pip3 install virtualenv

        # Caching Dependencies using actions/cache@v2
      - name: Setup Virtual env
        uses: actions/cache@v2
        id: cache-venv
        with:
          path: venv
          key: ${{ runner.os }}-venv-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-venv-

      - name: Activate and Install Dependencies into Virtual env
        run: python -m venv venv && source venv/bin/activate &&
          pip3 install -r requirements.txt
        if: steps.cache-venv.outputs.cache-hit != 'true'

      # Install all the app dependencies
      - name: Install dependencies
        run: pip3 install -r requirements.txt

      # Build the app and run tests
      - name: Build and Run Test
        run: . venv/bin/activate && pytest

      # use the highest level of compression to create api.zip archive.
      - name: Create Zipfile archive of Dependencies
        run: zip -r9 api.zip venv/lib/python3.7/site-packages/*

      # update api.zip with ./app contents
      - name: Add App to Zipfile
        run: |
          zip -g api.zip -r app/*
          mv api.zip api-v${{steps.tag.outputs.tag}}.zip

        # Upload api.zip to GitHub server as an artifact using actions/upload-artifact@v2
        # the next job to retrieve back the artifact file
      - name: Upload zip file artifact
        uses: actions/upload-artifact@v2
        with:
          name: api
          path: api-v${{steps.tag.outputs.tag}}.zip

  continuous-deployment:
    runs-on: ubuntu-latest
    # job will only run when the continuous-integration build successfully completes
    needs: [continuous-integration]
    env:
      ACTIONS_STEP_DEBUG: true
      ACTIONS_RUNNER_DEBUG: true
    # Check if current branch is main
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v2

      - name: Update lambda version in terraform file
        run: |
          sed -i "s/api.zip/api-v${{needs.continuous-integration.outputs.tag}}.zip/g" ./terraform/variables.tf
      - name: Install AWS CLI
        uses: unfor19/install-aws-cli-action@v1
        with:
          version: 1
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Download Lambda api.zip
        uses: actions/download-artifact@v2
        with:
          name: api

      - name: Upload to S3
        run: aws s3 cp api-v${{needs.continuous-integration.outputs.tag}}.zip s3://crommie-s3/api-v${{needs.continuous-integration.outputs.tag}}.zip
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Terraform Init
        run: terraform init
        working-directory: terraform

      - name: Terraform Validate
        run: terraform validate -no-color
        working-directory: terraform

      - name: Terraform Plan
        run: terraform plan -no-color
        continue-on-error: true
        working-directory: terraform

      - name: Terraform Apply && Deploy Lambda
        if: github.ref == 'refs/heads/main'
        run: terraform apply -auto-approve
        working-directory: terraform

      - name: Clean repo
        run: git clean -f

      - name: Create and push tag
        run: |
          git tag ${{needs.continuous-integration.outputs.tag}} || echo "Tag already exists"
          git push --tags
        env:
          REPO_USER: ${{ secrets.REPO_USER }}
          REPO_ACCESS_KEY: ${{ secrets.REPO_ACCESS_KEY }}
